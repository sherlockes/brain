:PROPERTIES:
:ID:       80ce4bf8-3936-45bf-adc9-041795828500
:END:
#+title: org-roam
#+filetags: :emacs:
#+STARTUP: overview

#+date: <2023-08-30>

#+hugo_custom_front_matter: :thumbnail "images/org-roam.png"
#+setupfile: ./setup.conf
#+hugo_tags: org-roam
#+hugo_categories: emacs
#+hugo_draft: false

Org-Roam en una extensión de [[id:c6e7e0fc-cb04-4a4d-beb3-1936f0d3aa07][Emacs]] diseñada para facilitar la toma de notas y la organización de información en forma de documentos interconectados. Está especialmente diseñada para usuarios que emplean [[id:d0e0ffd7-78fa-4fe9-a6b2-3a59223169c9][Org-Mode]] en [[id:c6e7e0fc-cb04-4a4d-beb3-1936f0d3aa07][Emacs]], que es un sistema de organización y gestión de tareas altamente personalizable.

#+BEGIN_export html
<!--more-->
#+END_export

*** [[id:a74766d7-fa12-4913-b44a-4c9861fca9bf][Primeros pasos]]
*** [[id:fb8a4100-e397-4371-8d48-5b012d7f4205][Comandos esenciales]]
*** [[id:bbf6afcb-c7b9-4eca-8c85-39fb3ed8ae08][Plantillas]]
*** Sincronizar con repositorio en Github
Si la carpeta "org-roam" ya está creada se cambia el directorio de trabajo a la misma y se actualiza el repositorio. Si la carpeta no está creada descarga el repositorio
#+begin_src elisp
  (if (file-exists-p "~/org-roam/")
    (let ((default-directory "~/org-roam"))(shell-command "git pull"))
  (let ((default-directory "~/"))(shell-command "git clone git@github.com:sherlockes/org-roam.git"))
)
#+end_src
Esto, al estar introducido en el archivo "init.el" se ejecutará al arrancar Emacs.

Para conseguir que se sincronice tras modificar algún archivo usaremos un "hook" y una función auxiliar que simplemente comprueba si el archivo que se ha modificado está dentro de la carpeta "org-roam". En caso de que se de la condición, se ejecutará otra función que actualiza el repositorio.

#+begin_src elisp
  (defun org-roam-update()
    (interactive)

	(let ((default-directory "~/org-roam")) 
	    (shell-command "git add --all")
	    (shell-command "git commit -m 'Update'")
	    (shell-command "git push")
	)
    )
  (defun funcion-al-guardar ()
    (let ((directorio-org-roam (expand-file-name "org-roam" (getenv "HOME"))))
      (when (string-prefix-p directorio-org-roam buffer-file-name)
	(org-roam-update))))

  (add-hook 'after-save-hook 'funcion-al-guardar)
#+end_src

*** Exportar org-roam-ui a una web estática
Emplearemos las instrucciones de [[https://github.com/ikoamu/publish-org-roam-ui/tree/main][Ikoamu]] para generar una web estática a partir de [[https://docs.github.com/es/actions][Github Actions]]. Estos son los pasos a seguir.
 - Crear un repositorio en [[https://www.github.com][Github]]
 - Clonarlo a nuestro equipo donde usamos [[id:c6e7e0fc-cb04-4a4d-beb3-1936f0d3aa07][emacs]] y [[id:80ce4bf8-3936-45bf-adc9-041795828500][org-roam]]
 - Copiamos la estructura del repo de [[https://github.com/ikoamu/publish-org-roam-ui/tree/main][Ikoamu]] de forma que quede la estructura como la siguiente
   #+begin_src txt
├── action.yml
├── create_notes.sh
├── generate_json.js
├── generate_searchdata.mjs
├── LICENSE
├── org-files
│   ├── archivo1.org
│   ├── archivo2.org
│   ├── archivo3.org
├── package.json
└── package-lock.json
   #+end_src
 - Dentro de la carpeta ".github/workflows" creamos el archivo "gh-pages.yml"
   #+begin_src yaml
name: Generate static org-roam-ui page
on:
  push:
    branches:
      - main
permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  main:
    runs-on: ubuntu-latest
    steps:
      - name: Generate org-roam-ui page
        uses: ikoamu/org-roam-ui-hosting@main
        with:
          org-roam-db-filename: org-roam.db
          deploy-to-pages: true
          org-roam-directory: org-files
   #+end_src
 - Actualizamos los cambios del repositorio
 - Accedemos a la página de nuestro repositorio en Github
 - Accedemos al menú "Settings-Pages"
 - En "Build and deployment" seleccionamos "Github Actions"
