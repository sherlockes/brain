:PROPERTIES:
:ID:       de7aa47f-2138-470f-a412-977c1cf3d42c
:END:
#+title: docker
#+STARTUP: overview
#+date: <2025-02-17>
#+filetags: apps

[[https://www.docker.com][Docker]] es un proyecto de código abierto que automatiza el despliegue de aplicaciones dentro de contenedores de software, proporcionando así una capa adicional de abstracción y automatización de virtualización de aplicaciones en múltiples sistemas operativos.

*** Instalación
#+BEGIN_SRC bash
curl -fsSL https://get.docker.com -o get-docker.sh
chmod u+x get-docker.sh
sudo ./get-docker.sh
sudo usermod -aG docker $(whoami)
#+END_SRC

**Tras la instalación hay que cerrar la sesión de la terminal y volverla a abrir para que los cambios surtan efecto.**

**** Ejecutar sin sudo
#+begin_src bash
sudo groupadd docker
sudo usermod -aG docker <usuario>
su - <usuario>
#+end_src
*** Comandos básicos
 - Formatear la salida (json) -> ~comando --format '{{ json . }}' | jq~
 - Parar un contenedor - docker stop xxxxxxxxx
 - Parar todos contenedores - docker stop `docker ps -q`
 - Listar todos contenedores - ~docker container ls~
 - Lanzar un docker-compose.yml -> ~docker compose up~
 - Lanzar un docker-compose.yml (Segundo plano) -> ~docker compose up -d~

**** Sistema
 - Obtener info del sistema -> ~docker system info --format 'El número de CPU es: {{ .NCPU }}'~
 - Obtener info del sistema (json) -> ~docker system info --format '{{ json .}}' | jq~
 - Estadísticas (Instantáneas) -> ~docker container stats --no-stream~
 - Estadísticas (Tiempo real) -> ~docker container stats~
 - Espacio usado -> ~docker system df~

**** Imágenes
 - Descargar -> ~docker image pull <imagen>
 - Listar (Todas) -> ~docker image ls~
 - Listar (filtro) -> ~docker image list filtro~
 - Borrar (Todas) -> ~docker rmi -f $(docker images -q)~
 - Buscar -> ~docker search nginx~
 - Inspeccionar -> ~docker image inspect hello-world --format '{{ json .Config }}' | jq~

**** Contenedores
 - Listar (Todos que están corriendo) -> ~docker container ls~
 - Listar (Todos) -> ~docker container ls --all~
 - Listar Contenedores y puertos -> ~docker container ls --format 'table {{.ID}}\t{{.Image}}\t{{.Ports}}'~
 - Variables de entorno (Listar) -> ~docker exec -it id env~
 - Borrar -> ~docker container rm id~
 - Borrar (Todos) -> ~docker rm -f $(docker ps -aq)~
 - Borrar (Todos forzando) -> ~docker container rm -f $(docker container ls -aq)~
 - Arranque en modo interactivo -> ~docker container run -it <imagen>~
 - Arranque desacoplado -> ~docker container run --detach <imagen>~ (o tambien ~-d~)
 - Arranque montando volumen -> ~docker run -it --rm -v ~/local:/contenedor <imagen>~
 - Parar un contenedor -> ~docker container stop <contenedor>~
 - Parar todos contenedores -> ~docker container stop $(docker container ls -aq)~
 - Puertos -> ~docker container run --publish <máquina>:<contenedor> <imagen>~
 - Consultar log y esperar -> ~docker container logs --follow <contenedor>~
 - Consultar log -> ~docker container logs <contenedor>~
 - Consultar log (parámetros) -> ~-since~ (Desde), ~-tail~ (Ultimos), ~-until~ (Hasta)
 - IP asignada -> ~docker container inspect <id> --format '{{ json .NetworkSettings.Networks.bridge.IPAddress }}'~

**** Redes
 - Listar -> ~docker network ls~
 - Inspeccionar -> ~docker network inspect <nombre>~
 - Contenedores conectados a red -> ~docker network inspect bridge --format='{{ json .Containers }}'~
 - Crear nueva red "bridge" -> ~docker network create --driver bridge <nombre>~
 - Eliminar una red -> ~docker network rm <nombre>~
   
**** Otros
*** Moviendo un contenedor a otro Host
- Asegurarse que Docker está instalado en el otro Host
- scp -r ~/dockers/intrubot pi@192.168.10.210:~/dockers/
- sudo apt-get install docker-compose
*** Crear un contenedor

docker run -it --name test-deps ubuntu:22.04 /bin/bash

Partiendo de ubuntu:22.04
apt update
apt upgrade -y
apt install -y curl
apt install -y unzip
curl https://rclone.org/install.sh | bash
