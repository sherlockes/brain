:PROPERTIES:
:ID:       03c84b6d-dee5-473e-822b-5702f535419e
:END:
#+title: ox-hugo
#+STARTUP: overview

#+date: <2023-08-30>
#+hugo_custom_front_matter: :thumbnail "images/ox-hugo.png"
#+setupfile: ./setup.conf
#+hugo_tags: ox-hugo
#+hugo_categories: emacs
#+hugo_draft: false

[[https://ox-hugo.scripter.co][Ox-hugo]] es una herramienta de [[id:c6e7e0fc-cb04-4a4d-beb3-1936f0d3aa07][Emacs]] que simplifica la conversión de contenido desde Org Mode a [[id:5f94cb35-4aa6-4b6b-8b9f-5e0dde6cd4eb][Markdown]] para su uso con [[id:6064b7ef-acf5-401f-a11c-1d923bbc85c4][Hugo]], un generador de sitios web. Facilita la creación de blogs y sitios web, permitiendo a los usuarios escribir en [[id:d0e0ffd7-78fa-4fe9-a6b2-3a59223169c9][Org Mode]] y luego exportar a un formato compatible con Hugo.

#+BEGIN_export html
<!--more-->
#+END_export

*** Documentación Oficial
- [[https://ox-hugo.scripter.co/doc/installation/][Instalación]]

*** Fechas
- Actualizar o insertar fecha actual -> C-u C-u C-c .
- Fechas - [[https://ox-hugo.scripter.co/doc/dates/][Enlace]]
- Actualizar automáticamente la fecha de actualización -> ~#+hugo_auto_set_lastmod: t~

*** Archivo setup.conf
Para no tener que añadir todos los campos de exportación en dad docuento org, utilizamos un archivo de configuración "setup.conf" tal y como explica en este [[https://github.com/peromage/peromage.github.io/blob/master/blog/setup.conf][artículo]].  

*** Exportar
**** Problema con la exportación de Links
Hay que añadir el siguiente código - [[https://github.com/kaushalmodi/ox-hugo/issues/483][Enlace]]
#+begin_src elisp
  (setq org-id-extra-files (directory-files-recursively org-roam-directory "\\.org$")))
#+end_src
Tienen que estar todos los archivos de Org-Roam en la carpeta raiz, de lo contrario no funciona
**** Auto exportar mediante ".dir-locals.el"
Para auto exportar todos los archivos de una carpeta al guardar, segun la documentación [[https://ox-hugo.scripter.co/doc/auto-export-on-saving/#enable-for-the-whole-project][oficial]] hay que crear un documento ".dir-locals.el" en la raiz del proyecto (Por encima de la carpeta donde están los *.org) con el siguiente contenido.
#+begin_src elisp
  (("content-org/"
  . ((org-mode . ((eval . (org-hugo-auto-export-mode)))))))
#+end_src
#+begin_quote
El problema de este método es que realiza la función del "hook" al guardar antes que la exportación, por lo que no se actualiza correctamente.
#+end_quote
**** Auto exportar mediante "hook" al guardar
Primero tenemos que crear un hook que se ejecute cuando guardamos un archivo dentro de determianda carpeta y posteriormente una función asignada a este hook que exporte el archivo en caso de que sea del tipo "*.org".

#+begin_src elisp
  (defun funcion-al-guardar ()
    (interactive)
    (if (string= (file-name-extension buffer-file-name) "org")
      (org-hugo-export-wim-to-md :all-subtrees))

    (let ((default-directory "~/brain"))
      (shell-command "gitup")
    )
  )

  (add-hook 'after-save-hook (lambda () (when (and buffer-file-name (string-prefix-p brain-dir buffer-file-name))(funcion-al-guardar))))
#+end_src

*** Imágenes
 - Hay que arrancar correctamente el servidor de hugo ~hugo server --navigateToChanged --baseURL=http://localhost:1313/~ y el servidor remoto tiene que apuntar directamente a la raiz del proyecto.

 - Incluir una imagen que esté dentro de la carpeta "images" junto con la nota usaremos el la notación ~[[./images/pp.png]]~. De esta forma se copiará la imagen al directorio "ox-hugo" dentro de "static" creando una carpeta "ox-hugo".

 #+begin_quote
 Para comprobar a medida que escribimos que la imagen ha sido bien introducida usaremos el ataje de teclado ~C-c C-x C-v~ (org-display-inline-images) para cambiar al modo de visualización de imagenes insertadas.
 #+end_quote
